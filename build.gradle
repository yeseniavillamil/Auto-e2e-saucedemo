defaultTasks 'clean','test','aggregate'

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        /**
         * verify serenity gradle plugin version is compatible with serenity core version
         * could find conflicts in the generation of the report
         */
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityGradleVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'

//active serenity-gradle-plugin
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"



//apply for S.O Windows, fixing native separator to standard separator
System.setProperty('user.dir',System.getProperty('user.dir').replace("\\","/"))

//url package base in format path "/"
System.setProperty("build.gradle.project.package.base.url",System.getProperty('gradle.props.project.package.base').replace('.','/'))


java {
    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"
}

def varEncoding = System.getProperty("gradle.props.project.encode")

compileJava {
    options.encoding = "${varEncoding}"
}
compileTestJava {
    options.encoding = "${varEncoding}"
}

ext {
    //junit5
    junit_platform_launcher_version="1.10.2"
    cucumber_junit_platform_engine_version="7.16.1"
    junit_platform_suite_version="1.10.2"
    junit_jupiter_engine_version="5.10.2"
    junit_vintage_engine_version="5.10.2"
}

dependencies {

    implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",

            "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
            "org.assertj:assertj-core:${assertjVersion}"

    //junit5
    testImplementation "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}",
             "io.cucumber:cucumber-junit-platform-engine:${cucumber_junit_platform_engine_version}",
             "org.junit.platform:junit-platform-suite:${junit_platform_suite_version}",
             "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_engine_version}",
             "org.junit.vintage:junit-vintage-engine:${junit_vintage_engine_version}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
}

test {
    useJUnitPlatform()//enable JUnit5
    systemProperties System.getProperties()

    //execute runners in paralell, enable when managed sessions is coverage
    maxParallelForks = Runtime.runtime.availableProcessors()

    testLogging.showStandardStreams = true
}

serenity {
    testRoot = System.getProperty("gradle.props.project.package.base")+".runners"
    requirementsBaseDir = System.getProperty("gradle.props.project.package.resource.test.url")+"/features"
}

gradle.startParameter.continueOnFailure = true


